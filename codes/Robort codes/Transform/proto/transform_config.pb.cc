// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transform_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "transform_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transform {

namespace {

const ::google::protobuf::Descriptor* ParaGimbal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParaGimbal_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_transform_5fconfig_2eproto() {
  protobuf_AddDesc_transform_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "transform_config.proto");
  GOOGLE_CHECK(file != NULL);
  ParaGimbal_descriptor_ = file->message_type(0);
  static const int ParaGimbal_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaGimbal, roll_compensate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaGimbal, pitch_compensate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaGimbal, yaw_compensate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaGimbal, x_compensate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaGimbal, y_compensate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaGimbal, z_compensate_),
  };
  ParaGimbal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParaGimbal_descriptor_,
      ParaGimbal::default_instance_,
      ParaGimbal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaGimbal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaGimbal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParaGimbal));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_transform_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParaGimbal_descriptor_, &ParaGimbal::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_transform_5fconfig_2eproto() {
  delete ParaGimbal::default_instance_;
  delete ParaGimbal_reflection_;
}

void protobuf_AddDesc_transform_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026transform_config.proto\022\ttransform\"\231\001\n\n"
    "ParaGimbal\022\027\n\017Roll_compensate\030\001 \002(\001\022\030\n\020P"
    "itch_compensate\030\002 \002(\001\022\026\n\016Yaw_compensate\030"
    "\003 \002(\001\022\024\n\014X_compensate\030\004 \002(\001\022\024\n\014Y_compens"
    "ate\030\005 \002(\001\022\024\n\014Z_compensate\030\006 \002(\001", 191);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transform_config.proto", &protobuf_RegisterTypes);
  ParaGimbal::default_instance_ = new ParaGimbal();
  ParaGimbal::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_transform_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_transform_5fconfig_2eproto {
  StaticDescriptorInitializer_transform_5fconfig_2eproto() {
    protobuf_AddDesc_transform_5fconfig_2eproto();
  }
} static_descriptor_initializer_transform_5fconfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ParaGimbal::kRollCompensateFieldNumber;
const int ParaGimbal::kPitchCompensateFieldNumber;
const int ParaGimbal::kYawCompensateFieldNumber;
const int ParaGimbal::kXCompensateFieldNumber;
const int ParaGimbal::kYCompensateFieldNumber;
const int ParaGimbal::kZCompensateFieldNumber;
#endif  // !_MSC_VER

ParaGimbal::ParaGimbal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.ParaGimbal)
}

void ParaGimbal::InitAsDefaultInstance() {
}

ParaGimbal::ParaGimbal(const ParaGimbal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:transform.ParaGimbal)
}

void ParaGimbal::SharedCtor() {
  _cached_size_ = 0;
  roll_compensate_ = 0;
  pitch_compensate_ = 0;
  yaw_compensate_ = 0;
  x_compensate_ = 0;
  y_compensate_ = 0;
  z_compensate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParaGimbal::~ParaGimbal() {
  // @@protoc_insertion_point(destructor:transform.ParaGimbal)
  SharedDtor();
}

void ParaGimbal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParaGimbal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParaGimbal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParaGimbal_descriptor_;
}

const ParaGimbal& ParaGimbal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transform_5fconfig_2eproto();
  return *default_instance_;
}

ParaGimbal* ParaGimbal::default_instance_ = NULL;

ParaGimbal* ParaGimbal::New() const {
  return new ParaGimbal;
}

void ParaGimbal::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ParaGimbal*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(roll_compensate_, z_compensate_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParaGimbal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.ParaGimbal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double Roll_compensate = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_compensate_)));
          set_has_roll_compensate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Pitch_compensate;
        break;
      }

      // required double Pitch_compensate = 2;
      case 2: {
        if (tag == 17) {
         parse_Pitch_compensate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_compensate_)));
          set_has_pitch_compensate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_Yaw_compensate;
        break;
      }

      // required double Yaw_compensate = 3;
      case 3: {
        if (tag == 25) {
         parse_Yaw_compensate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_compensate_)));
          set_has_yaw_compensate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_X_compensate;
        break;
      }

      // required double X_compensate = 4;
      case 4: {
        if (tag == 33) {
         parse_X_compensate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_compensate_)));
          set_has_x_compensate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_Y_compensate;
        break;
      }

      // required double Y_compensate = 5;
      case 5: {
        if (tag == 41) {
         parse_Y_compensate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_compensate_)));
          set_has_y_compensate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_Z_compensate;
        break;
      }

      // required double Z_compensate = 6;
      case 6: {
        if (tag == 49) {
         parse_Z_compensate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_compensate_)));
          set_has_z_compensate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.ParaGimbal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.ParaGimbal)
  return false;
#undef DO_
}

void ParaGimbal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.ParaGimbal)
  // required double Roll_compensate = 1;
  if (has_roll_compensate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->roll_compensate(), output);
  }

  // required double Pitch_compensate = 2;
  if (has_pitch_compensate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pitch_compensate(), output);
  }

  // required double Yaw_compensate = 3;
  if (has_yaw_compensate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->yaw_compensate(), output);
  }

  // required double X_compensate = 4;
  if (has_x_compensate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x_compensate(), output);
  }

  // required double Y_compensate = 5;
  if (has_y_compensate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y_compensate(), output);
  }

  // required double Z_compensate = 6;
  if (has_z_compensate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->z_compensate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.ParaGimbal)
}

::google::protobuf::uint8* ParaGimbal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transform.ParaGimbal)
  // required double Roll_compensate = 1;
  if (has_roll_compensate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->roll_compensate(), target);
  }

  // required double Pitch_compensate = 2;
  if (has_pitch_compensate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pitch_compensate(), target);
  }

  // required double Yaw_compensate = 3;
  if (has_yaw_compensate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->yaw_compensate(), target);
  }

  // required double X_compensate = 4;
  if (has_x_compensate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x_compensate(), target);
  }

  // required double Y_compensate = 5;
  if (has_y_compensate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y_compensate(), target);
  }

  // required double Z_compensate = 6;
  if (has_z_compensate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->z_compensate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.ParaGimbal)
  return target;
}

int ParaGimbal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double Roll_compensate = 1;
    if (has_roll_compensate()) {
      total_size += 1 + 8;
    }

    // required double Pitch_compensate = 2;
    if (has_pitch_compensate()) {
      total_size += 1 + 8;
    }

    // required double Yaw_compensate = 3;
    if (has_yaw_compensate()) {
      total_size += 1 + 8;
    }

    // required double X_compensate = 4;
    if (has_x_compensate()) {
      total_size += 1 + 8;
    }

    // required double Y_compensate = 5;
    if (has_y_compensate()) {
      total_size += 1 + 8;
    }

    // required double Z_compensate = 6;
    if (has_z_compensate()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParaGimbal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParaGimbal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParaGimbal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParaGimbal::MergeFrom(const ParaGimbal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roll_compensate()) {
      set_roll_compensate(from.roll_compensate());
    }
    if (from.has_pitch_compensate()) {
      set_pitch_compensate(from.pitch_compensate());
    }
    if (from.has_yaw_compensate()) {
      set_yaw_compensate(from.yaw_compensate());
    }
    if (from.has_x_compensate()) {
      set_x_compensate(from.x_compensate());
    }
    if (from.has_y_compensate()) {
      set_y_compensate(from.y_compensate());
    }
    if (from.has_z_compensate()) {
      set_z_compensate(from.z_compensate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParaGimbal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParaGimbal::CopyFrom(const ParaGimbal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaGimbal::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ParaGimbal::Swap(ParaGimbal* other) {
  if (other != this) {
    std::swap(roll_compensate_, other->roll_compensate_);
    std::swap(pitch_compensate_, other->pitch_compensate_);
    std::swap(yaw_compensate_, other->yaw_compensate_);
    std::swap(x_compensate_, other->x_compensate_);
    std::swap(y_compensate_, other->y_compensate_);
    std::swap(z_compensate_, other->z_compensate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParaGimbal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParaGimbal_descriptor_;
  metadata.reflection = ParaGimbal_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transform

// @@protoc_insertion_point(global_scope)
